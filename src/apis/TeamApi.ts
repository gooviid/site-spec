/* tslint:disable */
/* eslint-disable */
/**
 * Goovi ID
 * GOOVI ID Website spec
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginResponse,
  MyTeamModel,
  TeamInvitatioUserResponse,
  TeamInvitation,
  TeamInvitationRequest,
  TeamMember,
} from '../models';
import {
    LoginResponseFromJSON,
    LoginResponseToJSON,
    MyTeamModelFromJSON,
    MyTeamModelToJSON,
    TeamInvitatioUserResponseFromJSON,
    TeamInvitatioUserResponseToJSON,
    TeamInvitationFromJSON,
    TeamInvitationToJSON,
    TeamInvitationRequestFromJSON,
    TeamInvitationRequestToJSON,
    TeamMemberFromJSON,
    TeamMemberToJSON,
} from '../models';

export interface TeamDeleteRequest {
    id?: string;
}

export interface TeamInvitationPostRequest {
    teamInvitatioUserResponse?: TeamInvitatioUserResponse;
}

export interface TeamInviteDeleteRequest {
    memberEmail?: string;
}

export interface TeamInvitePostRequest {
    teamInvitationRequest?: TeamInvitationRequest;
}

export interface TeamRolePostRequest {
    teamInvitationRequest?: TeamInvitationRequest;
}

export interface TeamSwitchGetRequest {
    id?: string;
}

/**
 * 
 */
export class TeamApi extends runtime.BaseAPI {

    /**
     * Delete team member
     */
    async teamDeleteRaw(requestParameters: TeamDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MyTeamModel>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/team`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MyTeamModelFromJSON(jsonValue));
    }

    /**
     * Delete team member
     */
    async teamDelete(requestParameters: TeamDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MyTeamModel> {
        const response = await this.teamDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get MY Team
     */
    async teamGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MyTeamModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/team`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MyTeamModelFromJSON(jsonValue));
    }

    /**
     * Get MY Team
     */
    async teamGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MyTeamModel> {
        const response = await this.teamGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Invitation to me
     */
    async teamInvitationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamInvitation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/team/invitation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamInvitationFromJSON));
    }

    /**
     * Get Invitation to me
     */
    async teamInvitationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamInvitation>> {
        const response = await this.teamInvitationGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Response to invitation
     */
    async teamInvitationPostRaw(requestParameters: TeamInvitationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/team/invitation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamInvitatioUserResponseToJSON(requestParameters.teamInvitatioUserResponse),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Response to invitation
     */
    async teamInvitationPost(requestParameters: TeamInvitationPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamInvitationPostRaw(requestParameters, initOverrides);
    }

    /**
     * Cancel Invitation
     */
    async teamInviteDeleteRaw(requestParameters: TeamInviteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.memberEmail !== undefined) {
            queryParameters['member_email'] = requestParameters.memberEmail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/team/invite`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel Invitation
     */
    async teamInviteDelete(requestParameters: TeamInviteDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamInviteDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Invitation of team
     */
    async teamInviteGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamInvitation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/team/invite`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamInvitationFromJSON));
    }

    /**
     * Get Invitation of team
     */
    async teamInviteGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamInvitation>> {
        const response = await this.teamInviteGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Invite a member
     */
    async teamInvitePostRaw(requestParameters: TeamInvitePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/team/invite`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamInvitationRequestToJSON(requestParameters.teamInvitationRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invite a member
     */
    async teamInvitePost(requestParameters: TeamInvitePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamInvitePostRaw(requestParameters, initOverrides);
    }

    /**
     * Leave from team
     */
    async teamLeaveDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/team/leave`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Leave from team
     */
    async teamLeaveDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.teamLeaveDeleteRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Team Member
     */
    async teamMemberGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamMember>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/team/member`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamMemberFromJSON));
    }

    /**
     * Get Team Member
     */
    async teamMemberGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamMember>> {
        const response = await this.teamMemberGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get My Membership
     */
    async teamMembershipGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamMember>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/team/membership`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamMemberFromJSON));
    }

    /**
     * Get My Membership
     */
    async teamMembershipGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamMember>> {
        const response = await this.teamMembershipGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set Role of team
     */
    async teamRolePostRaw(requestParameters: TeamRolePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/team/role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamInvitationRequestToJSON(requestParameters.teamInvitationRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set Role of team
     */
    async teamRolePost(requestParameters: TeamRolePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamRolePostRaw(requestParameters, initOverrides);
    }

    /**
     * Switch team
     */
    async teamSwitchGetRaw(requestParameters: TeamSwitchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/team/switch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Switch team
     */
    async teamSwitchGet(requestParameters: TeamSwitchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.teamSwitchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
