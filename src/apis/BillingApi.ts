/* tslint:disable */
/* eslint-disable */
/**
 * Goovi ID
 * GOOVI ID Website spec
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChargeHistory,
  DepositModel,
  DepositRequest,
  DepositResponse,
  MyBilling,
} from '../models';
import {
    ChargeHistoryFromJSON,
    ChargeHistoryToJSON,
    DepositModelFromJSON,
    DepositModelToJSON,
    DepositRequestFromJSON,
    DepositRequestToJSON,
    DepositResponseFromJSON,
    DepositResponseToJSON,
    MyBillingFromJSON,
    MyBillingToJSON,
} from '../models';

export interface BillingDepositRechargePostRequest {
    depositRequest?: DepositRequest;
}

/**
 * 
 */
export class BillingApi extends runtime.BaseAPI {

    /**
     * Get my billing
     */
    async billingChargeHistoryGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChargeHistory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/billing/charge/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChargeHistoryFromJSON));
    }

    /**
     * Get my billing
     */
    async billingChargeHistoryGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChargeHistory>> {
        const response = await this.billingChargeHistoryGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get deposit history
     */
    async billingDepositHistoryGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DepositModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/billing/deposit/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DepositModelFromJSON));
    }

    /**
     * Get deposit history
     */
    async billingDepositHistoryGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DepositModel>> {
        const response = await this.billingDepositHistoryGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Recharge billing
     */
    async billingDepositRechargePostRaw(requestParameters: BillingDepositRechargePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/billing/deposit/recharge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DepositRequestToJSON(requestParameters.depositRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositResponseFromJSON(jsonValue));
    }

    /**
     * Recharge billing
     */
    async billingDepositRechargePost(requestParameters: BillingDepositRechargePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositResponse> {
        const response = await this.billingDepositRechargePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get my billing
     */
    async billingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MyBilling>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Refresh authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = this.configuration.apiKey("token"); // Token authentication
        }

        const response = await this.request({
            path: `/billing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MyBillingFromJSON(jsonValue));
    }

    /**
     * Get my billing
     */
    async billingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MyBilling> {
        const response = await this.billingGetRaw(initOverrides);
        return await response.value();
    }

}
